"""Channel data structure."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_channels.ipynb.

# %% auto 0
__all__ = ['PacketType', 'Packet', 'Channel', 'as_chan', 'ChannelWriter', 'as_chan_writer', 'send']

# %% ../nbs/01_channels.ipynb 3
import abc
import dataclasses
import enum
import json
import time
import uuid
from typing import Any, Generic, TypeVar

import fastagent_hacking.streams as sx

# %% ../nbs/01_channels.ipynb 7
_T = TypeVar("T")


class PacketType(enum.StrEnum):
    MAIN = enum.auto()
    LOG_PACKET = enum.auto()
    EVENT_PACKET = enum.auto()


@dataclasses.dataclass(frozen=True)
class Packet(Generic[_T]):
    """Represents a unit of data inside a Channel

    Attributes:
      payload: The data that the packet carries
      packet_type: The type of the packet
      packet_id: ID for the packet.
      parent_packet_id: ID of the packet that spawned this packet.
      stamp: An ID that corrolates a packet to its producer.
          It's unique per invocation of the producer.
      created_at: The time the packet was created in milliseconds.
    """

    payload: _T
    packet_type: PacketType
    packet_id: str
    parent_packet_id: str
    stamp: str
    created_at: float

    def to_json(self):
        return json.dumps(
            self,
            default=lambda o: o.__dict__,
            sort_keys=True,
            indent=2,
        )

    @classmethod
    def from_json(cls, json_str):
        return cls(**json.loads(json_str))

# %% ../nbs/01_channels.ipynb 10
class Channel(sx.Stream[Packet[Any]], Generic[_T]):

    @property
    @abc.abstractmethod
    def elm_type(self) -> type[_T]:
        """Main type of the elements in the channel"""


def as_chan(s: sx.Stream[Packet[Any]], elm_type: type[_T]) -> Channel[_T]:
    """Coerce a stream of packets to a channel. Do not use `s` after this function."""

    class _ChanStream(Channel[_T]):

        @property
        def elm_type(self) -> type[_T]:
            return elm_type

        async def next(self, *args, **kwargs):
            return await s.next(*args, **kwargs)

    return _ChanStream()

# %% ../nbs/01_channels.ipynb 11
class ChannelWriter(sx.StreamWriter[Packet[Any]], Generic[_T]):
    elm_type: type[_T]  # Main packet payload type of the channel

    @abc.abstractmethod
    def readonly(self) -> Channel[_T]:
        """Return a readonly version of the channel"""


def as_chan_writer(
    s: sx.StreamWriter[Packet[Any]],
    elm_type: type[_T],
) -> ChannelWriter[_T]:
    """Coerce a stream writer of packets to a channel writer. Do not use `s` after this function."""

    class _ChanWriter(ChannelWriter[_T]):

        @property
        def elm_type(self) -> type[_T]:
            return elm_type

        async def put(self, *args, **kwargs):
            assert all(isinstance(a, Packet) for a in args)
            await s.put(*args, **kwargs)

        async def shutdown(self, *args, **kwargs):
            await s.shutdown(*args, **kwargs)

        def readonly(self, *args, **kwargs) -> Channel[_T]:
            return as_chan(s.readonly(*args, **kwargs), elm_type)

    return _ChanWriter()

# %% ../nbs/01_channels.ipynb 18
async def send(payload: _T, chan: ChannelWriter[_T]):
    p = Packet(
        payload=payload,
        packet_type=PacketType.MAIN,
        packet_id=str(uuid.uuid4()),
        parent_packet_id=str(uuid.uuid4()),
        stamp="",  # FIXME: Add stamp
        created_at=time.time(),
    )
    await chan.put(p)
